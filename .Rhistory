# Forecasted Values From ARIMA
forecastedvalues=forecast(fitweatherarima,h=148)
forecastedvalues
plot(forecastedvalues)
# Percentage Error
df<-data.frame(mydata$tmin[592:739],forecastedvalues$lower)
col_headings<-c("Actual Weather","Forecasted Weather")
names(df)<-col_headings
attach(df)
range(df$`Actual Weather`)
library(Metrics)
rmse(df$`Actual Weather`,df$`Forecasted Weather`)
mean(df$`Actual Weather`)
var(df$`Actual Weather`)
# Directories
mydata<- read.csv("meteireann_dublin.csv")
attach(mydata)
summary(mydata)
weatherarima <- ts(mydata$meant[1:732], start = c(1941,11), frequency = 12)
plot(weatherarima,type="l",ylab="Temperature")
title("Mean Temperature - Dublin Airport")
stl_weather = stl(weatherarima, "periodic")
seasonal_stl_weather   <- stl_weather$time.series[,1]
trend_stl_weather     <- stl_weather$time.series[,2]
random_stl_weather  <- stl_weather$time.series[,3]
plot(as.ts(seasonal_stl_weather))
title("Seasonal")
plot(trend_stl_weather)
title("Trend")
plot(random_stl_weather)
title("Random")
# Load libraries
library(MASS)
library(tseries)
library(forecast)
# ACF, PACF and Dickey-Fuller Test
acf(weatherarima, lag.max=20)
pacf(weatherarima, lag.max=20)
adf.test(weatherarima)
components <- decompose(weatherarima)
components
plot(components)
# ARIMA
fitweatherarima<-auto.arima(weatherarima, trace=TRUE, test="kpss", ic="bic")
fitweatherarima
confint(fitweatherarima)
plot(weatherarima,type='l')
title('Mean temperature')
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitweatherarima,h=183)
forecastedvalues
plot(forecastedvalues)
# Directories
mydata<- read.csv("meteireann_dublin.csv")
attach(mydata)
summary(mydata)
# Directories
mydata<- read.csv("meteireann_dublin.csv")
attach(mydata)
summary(mydata)
weatherarima <- ts(mydata$meant[1:732], start = c(1941,11), frequency = 12)
plot(weatherarima,type="l",ylab="Temperature")
title("Mean Temperature - Dublin Airport")
stl_weather = stl(weatherarima, "periodic")
seasonal_stl_weather   <- stl_weather$time.series[,1]
trend_stl_weather     <- stl_weather$time.series[,2]
random_stl_weather  <- stl_weather$time.series[,3]
plot(as.ts(seasonal_stl_weather))
title("Seasonal")
plot(trend_stl_weather)
title("Trend")
plot(random_stl_weather)
title("Random")
# Load libraries
library(MASS)
library(tseries)
library(forecast)
# ACF, PACF and Dickey-Fuller Test
acf(weatherarima, lag.max=20)
pacf(weatherarima, lag.max=20)
adf.test(weatherarima)
components <- decompose(weatherarima)
components
plot(components)
# ARIMA
fitweatherarima<-auto.arima(weatherarima, trace=TRUE, test="kpss", ic="bic")
fitweatherarima
confint(fitweatherarima)
plot(weatherarima,type='l')
title('Mean temperature')
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitweatherarima,h=183)
forecastedvalues
plot(forecastedvalues)
# Test Values
test=mydata$meant[732:915]
test
library(Metrics)
rmse(forecastedvalues, mydata$meant)
library(Metrics)
rmse(forecastedvalues, test)
test=mydata$meant[733:915]
test
library(Metrics)
rmse(forecastedvalues, test)
forecastedvalues
View(forecastedvalues)
library(Metrics)
rmse(forecastedvalues$mean, test)
# Directories
mydata<- read.csv("meteireann_dublin.csv")
attach(mydata)
summary(mydata)
weatherarima <- ts(mydata$meant[1:732], start = c(1941,11), frequency = 12)
plot(weatherarima,type="l",ylab="Temperature")
title("Mean Temperature - Dublin Airport")
stl_weather = stl(weatherarima, "periodic")
seasonal_stl_weather   <- stl_weather$time.series[,1]
trend_stl_weather     <- stl_weather$time.series[,2]
random_stl_weather  <- stl_weather$time.series[,3]
plot(as.ts(seasonal_stl_weather))
title("Seasonal")
plot(trend_stl_weather)
title("Trend")
plot(random_stl_weather)
title("Random")
# Load libraries
library(MASS)
library(tseries)
library(forecast)
# ACF, PACF and Dickey-Fuller Test
acf(weatherarima, lag.max=20)
pacf(weatherarima, lag.max=20)
adf.test(weatherarima)
components <- decompose(weatherarima)
components
plot(components)
# ARIMA
fitweatherarima<-auto.arima(weatherarima, trace=TRUE, test="kpss", ic="bic")
fitweatherarima
confint(fitweatherarima)
plot(weatherarima,type='l')
title('Mean temperature')
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitweatherarima,h=183)
forecastedvalues
plot(forecastedvalues)
# Test Values
test=mydata$meant[732:915]
test
library(Metrics)
rmse(forecastedvalues$mean, test)
# Test Values
test=mydata$meant[733:915]
test
library(Metrics)
rmse(forecastedvalues$mean, test)
mean(test)
# Directories
mydata<- read.csv("mly532_condensed.csv")
attach(mydata)
summary(mydata)
weatherarima <- ts(mydata$meant[1:732], start = c(1941,11), frequency = 12)
plot(weatherarima,type="l",ylab="Temperature")
title("Mean Temperature - Dublin Airport")
stl_weather = stl(weatherarima, "periodic")
seasonal_stl_weather   <- stl_weather$time.series[,1]
trend_stl_weather     <- stl_weather$time.series[,2]
random_stl_weather  <- stl_weather$time.series[,3]
plot(as.ts(seasonal_stl_weather))
title("Seasonal")
plot(trend_stl_weather)
title("Trend")
plot(random_stl_weather)
title("Random")
# Load libraries
library(MASS)
library(tseries)
library(forecast)
# ACF, PACF and Dickey-Fuller Test
acf(weatherarima, lag.max=20)
pacf(weatherarima, lag.max=20)
adf.test(weatherarima)
components <- decompose(weatherarima)
components
plot(components)
# ARIMA
fitweatherarima<-auto.arima(weatherarima, trace=TRUE, test="kpss", ic="bic")
fitweatherarima
confint(fitweatherarima)
plot(weatherarima,type='l')
title('Mean temperature')
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitweatherarima,h=183)
forecastedvalues
plot(forecastedvalues)
# Test Values
test=mydata$meant[733:915]
test
library(Metrics)
rmse(forecastedvalues$mean, test)
mean(test)
# Directories
mydata<- read.csv("electricity.csv")
attach(mydata)
summary(mydata)
View(mydata)
View(mydata)
# Directories
mydata<- read.csv("electricity.csv")
attach(mydata)
summary(mydata)
consumption <- ts(mydata$Value[1:544], start = c(2011,3,29), frequency = 365)
plot(consumption,type="l",ylab="Kilowatt Consumption")
title("Electricity Consumption")
stl_consumption = stl(consumption, "periodic")
seasonal_stl_consumption   <- stl_consumption$time.series[,1]
trend_stl_consumption     <- stl_consumption$time.series[,2]
random_stl_consumption  <- stl_consumption$time.series[,3]
plot(as.ts(seasonal_stl_consumption))
title("Seasonal")
plot(trend_stl_consumption)
title("Trend")
plot(random_stl_consumption)
title("Random")
# Directories
mydata<- read.csv("electricity.csv")
attach(mydata)
summary(mydata)
consumption <- ts(mydata$Value[1:544], start = c(2011,3,29), frequency = 365)
plot(consumption,type="l",ylab="Kilowatt Consumption")
title("Electricity Consumption")
# Load libraries
library(MASS)
library(tseries)
library(forecast)
# ACF, PACF and Dickey-Fuller Test
acf(consumption, lag.max=20)
pacf(consumption, lag.max=20)
adf.test(consumption)
components <- decompose(consumption)
components
plot(components)
# ARIMA
fitconsumptionarima<-auto.arima(consumption, trace=TRUE, test="kpss", ic="bic")
fitconsumptionarima
confint(fitconsumptionarima)
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitconsumptionarima,h=136)
forecastedvalues
plot(forecastedvalues)
test=mydata$consumption[545:680]
test
View(mydata)
# Test Values
test=mydata$Value[545:680]
test
# Ljung-Box
Box.test(fitconsumptionarima$resid, lag=4, type="Ljung-Box")
Box.test(fitconsumptionarima$resid, lag=8, type="Ljung-Box")
Box.test(fitconsumptionarima$resid, lag=12, type="Ljung-Box")
library(Metrics)
rmse(forecastedvalues$mean, test)
mean(test)
# Directories
mydata<- read.csv("mly532.csv")
attach(mydata)
summary(mydata)
meant <- ts(mydata$meant[1:732], start = c(1941,11), frequency = 12)
plot(meant,type="l",ylab="Temperature")
title("Mean Temperature - Dublin Airport")
stl_weather = stl(meant, "periodic")
seasonal_stl_weather   <- stl_weather$time.series[,1]
trend_stl_weather     <- stl_weather$time.series[,2]
random_stl_weather  <- stl_weather$time.series[,3]
plot(as.ts(seasonal_stl_weather))
title("Seasonal")
plot(trend_stl_weather)
title("Trend")
plot(random_stl_weather)
title("Random")
# Load libraries
library(MASS)
library(tseries)
library(forecast)
# ACF, PACF and Dickey-Fuller Test
acf(meant, lag.max=20)
pacf(meant, lag.max=20)
adf.test(meant)
components <- decompose(meant)
components
plot(components)
# ARIMA
fitweatherarima<-auto.arima(meant, trace=TRUE, test="kpss", ic="bic")
fitweatherarima
confint(fitweatherarima)
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitweatherarima,h=183)
forecastedvalues
plot(forecastedvalues)
# Test Values
test=mydata$meant[733:915]
test
# Ljung-Box
Box.test(fitweatherarima$resid, lag=4, type="Ljung-Box")
Box.test(fitweatherarima$resid, lag=8, type="Ljung-Box")
Box.test(fitweatherarima$resid, lag=12, type="Ljung-Box")
library(Metrics)
rmse(forecastedvalues$mean, test)
mean(test)
# Directories
mydata<- read.csv("mly532.csv")
attach(mydata)
summary(mydata)
meant <- ts(mydata$meant[1:732], start = c(1941,11), frequency = 12)
plot(meant,type="l",ylab="Temperature")
title("Mean Temperature - Dublin Airport")
stl_weather = stl(meant, "periodic")
seasonal_stl_weather   <- stl_weather$time.series[,1]
trend_stl_weather     <- stl_weather$time.series[,2]
random_stl_weather  <- stl_weather$time.series[,3]
plot(as.ts(seasonal_stl_weather))
title("Seasonal")
plot(trend_stl_weather)
title("Trend")
plot(random_stl_weather)
title("Random")
# Load libraries
library(MASS)
library(tseries)
library(forecast)
# ACF, PACF and Dickey-Fuller Test
acf(meant, lag.max=20)
pacf(meant, lag.max=20)
adf.test(meant)
components <- decompose(meant)
components
plot(components)
# ARIMA
fitweatherarima<-auto.arima(meant, trace=TRUE, test="kpss", ic="bic")
fitweatherarima
confint(fitweatherarima)
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitweatherarima,h=183)
forecastedvalues
plot(forecastedvalues)
# Test Values
test=mydata$meant[733:915]
test
# Ljung-Box
Box.test(fitweatherarima$resid, lag=4, type="Ljung-Box")
Box.test(fitweatherarima$resid, lag=8, type="Ljung-Box")
Box.test(fitweatherarima$resid, lag=12, type="Ljung-Box")
library(Metrics)
rmse(forecastedvalues$mean, test)
mean(test)
# Directories
mydata<- read.csv("daily kilowatt consumption.csv")
attach(mydata)
summary(mydata)
View(mydata)
# Directories
mydata<- read.csv("daily kilowatt consumption.csv")
attach(mydata)
summary(mydata)
kw <- ts(mydata$Kilowatts[1:544], start = c(2011,03,29), frequency = 365)
plot(kw,type="l",ylab="Kilowatts")
title("Kilowatt Consumption")
# Directories
mydata<- read.csv("daily kilowatt consumption.csv")
attach(mydata)
summary(mydata)
kw <- ts(mydata$Kilowatts[1:544], start = c(2011,03,29), frequency = 365)
plot(kw,type="l",ylab="Kilowatts")
title("Kilowatt Consumption")
stl_kilowatts = stl(kw, "periodic")
# Directories
mydata<- read.csv("daily kilowatt consumption.csv")
attach(mydata)
summary(mydata)
kw <- ts(mydata$Kilowatts[1:544], start = c(2011,03,29), frequency = 365)
plot(kw,type="l",ylab="Kilowatts")
title("Kilowatt Consumption")
stl_kilowatts = stl(kw, "periodic")
# ACF, PACF and Dickey-Fuller Test
acf(kw, lag.max=20)
pacf(kw, lag.max=20)
adf.test(kw)
components <- decompose(kw)
# ARIMA
fitkilowattsarima<-auto.arima(kw, trace=TRUE, test="kpss", ic="bic")
# Directories
mydata<- read.csv("daily kilowatt consumption.csv")
attach(mydata)
summary(mydata)
kw <- ts(mydata$Kilowatts[1:544], start = c(2011,03,29), frequency = 365)
plot(kw,type="l",ylab="Kilowatts")
title("Kilowatt Consumption")
kw
fitkilowattsarima<-auto.arima(mydata$Kilowatts[1:544], trace=TRUE, test="kpss", ic="bic")
library(MASS)
library(tseries)
library(forecast)
fitkilowattsarima<-auto.arima(mydata$Kilowatts[1:544], trace=TRUE, test="kpss", ic="bic")
fitkilowattsarima
confint(fitkilowattsarima)
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitkilowattsarima,h=183)
forecastedvalues
plot(forecastedvalues)
# Directories
mydata<- read.csv("daily kilowatt consumption.csv")
attach(mydata)
summary(mydata)
# ARIMA
fitkilowattsarima<-auto.arima(mydata$Kilowatts[1:544], trace=TRUE, test="kpss", ic="bic")
fitkilowattsarima
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitkilowattsarima,h=136)
forecastedvalues
plot(forecastedvalues)
# Test Values
test=mydata$kw[545:693]
test
# Test Values
test=mydata$Kilowatts[545:693]
test
# Test Values
test=mydata$Kilowatts[545:680]
test
library(Metrics)
rmse(forecastedvalues$mean, test)
# Directories
mydata<- read.csv("daily kilowatt consumption.csv")
attach(mydata)
summary(mydata)
# ARIMA
fitkilowattsarima<-auto.arima(mydata$Kilowatts[1:544], trace=TRUE, test="kpss", ic="bic")
fitkilowattsarima
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitkilowattsarima,h=136)
forecastedvalues
plot(forecastedvalues)
# Directories
mydata<- read.csv("daily kilowatt consumption.csv")
attach(mydata)
summary(mydata)
themodel = arima(mydata$Kilowatts[1:544], order = c(5,1,1), seasonal = list(order = c(0,1,7), period = 365))
themodel = arima(mydata$Kilowatts[1:544], order = c(5,1,1), seasonal = list(order = c(0,1,7), period = 7))
themodel
predict(themodel, n.ahead=136)
forecast=predict(themodel, n.ahead=136)
View(forecast)
library(Metrics)
rmse(forecast$pred, test)
# Test Values
test=mydata$Kilowatts[545:680]
test
library(Metrics)
rmse(forecast$pred, test)
mean(test)
# Directories
mydata<- read.csv("daily kilowatt consumption.csv")
attach(mydata)
summary(mydata)
# ARIMA
fitkilowattsarima<-auto.arima(mydata$Kilowatts[1:544], trace=TRUE, test="kpss", ic="bic")
fitkilowattsarima
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitkilowattsarima,h=136)
forecastedvalues
plot(forecastedvalues)
# Test Values
test=mydata$Kilowatts[545:680]
test
library(Metrics)
rmse(forecastedvalues$mean, test)
mean(test)
# Directories
mydata<- read.csv("daily kilowatt consumption.csv")
attach(mydata)
summary(mydata)
# ARIMA
fitkilowattsarima<-auto.arima(mydata$Kilowatts[1:544], trace=TRUE, test="kpss", ic="bic")
fitkilowattsarima
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitkilowattsarima,h=136)
forecastedvalues
plot(forecastedvalues)
# Test Values
test=mydata$Kilowatts[545:680]
test
library(Metrics)
rmse(forecastedvalues$mean, test)
mean(test)
# Directories
mydata<- read.csv("daily kilowatt consumption.csv")
attach(mydata)
summary(mydata)
# ARIMA
fitarima<-auto.arima(mydata$Kilowatts[1:544], trace=TRUE, test="kpss", ic="bic")
fitarima
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitarima,h=136)
forecastedvalues
plot(forecastedvalues)
# Test Values
test=mydata$Kilowatts[545:680]
test
library(Metrics)
rmse(forecastedvalues$mean, test)
mean(test)
