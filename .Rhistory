# Directories
setwd("directory")
mydata<- read.csv("mly532.csv")
attach(mydata)
weatherarima <- ts(mydata$maxtp, start = c(1941,11), frequency = 12)
plot(weatherarima,type="l",ylab="Temperature in Celsius")
title("Maximum Air Temperature - Dublin")
# Load libraries
library(MASS)
library(tseries)
library(forecast)
# Plot and convert to ln format
lnweather=log(mydata$maxtp[1:741])
lnweather
# ACF, PACF and Dickey-Fuller Test
acf(lnweather, lag.max=20)
pacf(lnweather, lag.max=20)
adf.test(lnweather)
# Time series and seasonality
weatherarima <- ts(lnweather, start = c(1941,11), frequency = 12)
plot(weatherarima,type="l")
title("Maximum Air Temperature - Dublin")
components <- decompose(weatherarima)
components
plot(components)
# ARIMA
fitlnweather<-auto.arima(weatherarima, trace=TRUE, test="kpss", ic="bic")
fitlnweather
confint(fitlnweather)
plot(weatherarima,type='l')
title('Maximum Air Temperature - Dublin')
exp(lnweather)
# Forecasted Values From ARIMA
forecastedvalues_ln=forecast(fitlnweather,h=186)
forecastedvalues_ln
plot(forecastedvalues_ln)
forecastedvaluesextracted=as.numeric(forecastedvalues_ln$mean)
finalforecastvalues=exp(forecastedvaluesextracted)
finalforecastvalues
# Percentage Error
df<-data.frame(mydata$maxtp[742:927],finalforecastvalues)
col_headings<-c("Actual Weather","Forecasted Weather")
names(df)<-col_headings
attach(df)
percentage_error=((df$`Actual Weather`-df$`Forecasted Weather`)/(df$`Actual Weather`))
percentage_error
mean(percentage_error)
percentage_error=data.frame(abs(percentage_error))
accuracy=data.frame(percentage_error[percentage_error$abs.percentage_error. < 0.1,])
frequency=as.data.frame(table(accuracy))
sum(frequency$Freq)/186
hist(percentage_error$abs.percentage_error.,main="Histogram")
# Ljung-Box
Box.test(fitlnweather$resid, lag=5, type="Ljung-Box")
Box.test(fitlnweather$resid, lag=10, type="Ljung-Box")
Box.test(fitlnweather$resid, lag=15, type="Ljung-Box")
# Simple exponential smoothing with additive errors
fit1 <- ets(weatherarima)
fit1
forecastedvalues_ets=forecast(fit1,h=186)
forecastedvalues_ets
plot(forecastedvalues_ets)
forecastedvaluesextractedets=as.numeric(forecastedvalues_ets$mean)
finalforecastvaluesets=exp(forecastedvaluesextractedets)
finalforecastvaluesets
# Percentage Error
df<-data.frame(mydata$maxtp[742:927],finalforecastvaluesets)
col_headings<-c("Actual Weather","Forecasted Weather")
names(df)<-col_headings
attach(df)
percentage_error=((df$`Actual Weather`-df$`Forecasted Weather`)/(df$`Actual Weather`))
percentage_error
mean(percentage_error)
percentage_error=data.frame(abs(percentage_error))
accuracy=data.frame(percentage_error[percentage_error$abs.percentage_error. < 0.1,])
frequency=as.data.frame(table(accuracy))
sum(frequency$Freq)/186
# SARIMA
fit.1<-Arima(weatherarima, order = c(1,0,0))
# Forecasted Values From ARIMA
forecastedvalues_s=forecast(fit.1,h=186)
forecastedvalues_s
plot(forecastedvalues_s)
forecastedvaluesextracted=as.numeric(forecastedvalues_s$mean)
finalforecastvaluesseason=exp(forecastedvaluesextracted)
finalforecastvaluesseason
# Percentage Error
df<-data.frame(mydata$maxtp[742:927],finalforecastvaluesseason)
col_headings<-c("Actual Weather","Forecasted Weather")
names(df)<-col_headings
attach(df)
percentage_error=((df$`Actual Weather`-df$`Forecasted Weather`)/(df$`Actual Weather`))
percentage_error
mean(percentage_error)
percentage_error=data.frame(abs(percentage_error))
accuracy=data.frame(percentage_error[percentage_error$abs.percentage_error. < 0.1,])
frequency=as.data.frame(table(accuracy))
sum(frequency$Freq)/186
# Directories
mydata<- read.csv("braemar.csv")
attach(mydata)
summary(mydata)
weatherarima <- ts(mydata$tmin[1:591], start = c(1959,1), frequency = 12)
plot(weatherarima,type="l",ylab="Temperature")
title("Minimum Recorded Monthly Temperature: Braemar, Scotland")
stl_weather = stl(weatherarima, "periodic")
seasonal_stl_weather   <- stl_weather$time.series[,1]
trend_stl_weather     <- stl_weather$time.series[,2]
random_stl_weather  <- stl_weather$time.series[,3]
plot(as.ts(seasonal_stl_weather))
title("Seasonal")
plot(trend_stl_weather)
title("Trend")
plot(random_stl_weather)
title("Random")
# Load libraries
library(MASS)
library(tseries)
library(forecast)
# ACF, PACF and Dickey-Fuller Test
acf(weatherarima, lag.max=20)
pacf(weatherarima, lag.max=20)
adf.test(weatherarima)
# Time series and seasonality
weatherarima <- ts(weatherarima, start = c(1959,1), frequency = 12)
plot(weatherarima,type="l")
title("Minimum Recorded Monthly Temperature: Braemar, Scotland")
components <- decompose(weatherarima)
components
plot(components)
# ARIMA
fitweatherarima<-auto.arima(weatherarima, trace=TRUE, test="kpss", ic="bic")
fitweatherarima
confint(fitweatherarima)
plot(weatherarima,type='l')
title('Minimum Recorded Monthly Temperature: Braemar, Scotland')
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitweatherarima,h=148)
forecastedvalues
plot(forecastedvalues)
# Percentage Error
df<-data.frame(mydata$tmin[592:739],forecastedvalues$lower)
col_headings<-c("Actual Weather","Forecasted Weather")
names(df)<-col_headings
attach(df)
range(df$`Actual Weather`)
library(Metrics)
rmse(df$`Actual Weather`,df$`Forecasted Weather`)
mean(df$`Actual Weather`)
var(df$`Actual Weather`)
# Directories
mydata<- read.csv("meteireann_dublin.csv")
attach(mydata)
summary(mydata)
weatherarima <- ts(mydata$meant[1:732], start = c(1941,11), frequency = 12)
plot(weatherarima,type="l",ylab="Temperature")
title("Mean Temperature - Dublin Airport")
stl_weather = stl(weatherarima, "periodic")
seasonal_stl_weather   <- stl_weather$time.series[,1]
trend_stl_weather     <- stl_weather$time.series[,2]
random_stl_weather  <- stl_weather$time.series[,3]
plot(as.ts(seasonal_stl_weather))
title("Seasonal")
plot(trend_stl_weather)
title("Trend")
plot(random_stl_weather)
title("Random")
# Load libraries
library(MASS)
library(tseries)
library(forecast)
# ACF, PACF and Dickey-Fuller Test
acf(weatherarima, lag.max=20)
pacf(weatherarima, lag.max=20)
adf.test(weatherarima)
components <- decompose(weatherarima)
components
plot(components)
# ARIMA
fitweatherarima<-auto.arima(weatherarima, trace=TRUE, test="kpss", ic="bic")
fitweatherarima
confint(fitweatherarima)
plot(weatherarima,type='l')
title('Mean temperature')
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitweatherarima,h=183)
forecastedvalues
plot(forecastedvalues)
# Directories
mydata<- read.csv("meteireann_dublin.csv")
attach(mydata)
summary(mydata)
# Directories
mydata<- read.csv("meteireann_dublin.csv")
attach(mydata)
summary(mydata)
weatherarima <- ts(mydata$meant[1:732], start = c(1941,11), frequency = 12)
plot(weatherarima,type="l",ylab="Temperature")
title("Mean Temperature - Dublin Airport")
stl_weather = stl(weatherarima, "periodic")
seasonal_stl_weather   <- stl_weather$time.series[,1]
trend_stl_weather     <- stl_weather$time.series[,2]
random_stl_weather  <- stl_weather$time.series[,3]
plot(as.ts(seasonal_stl_weather))
title("Seasonal")
plot(trend_stl_weather)
title("Trend")
plot(random_stl_weather)
title("Random")
# Load libraries
library(MASS)
library(tseries)
library(forecast)
# ACF, PACF and Dickey-Fuller Test
acf(weatherarima, lag.max=20)
pacf(weatherarima, lag.max=20)
adf.test(weatherarima)
components <- decompose(weatherarima)
components
plot(components)
# ARIMA
fitweatherarima<-auto.arima(weatherarima, trace=TRUE, test="kpss", ic="bic")
fitweatherarima
confint(fitweatherarima)
plot(weatherarima,type='l')
title('Mean temperature')
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitweatherarima,h=183)
forecastedvalues
plot(forecastedvalues)
# Test Values
test=mydata$meant[732:915]
test
library(Metrics)
rmse(forecastedvalues, mydata$meant)
library(Metrics)
rmse(forecastedvalues, test)
test=mydata$meant[733:915]
test
library(Metrics)
rmse(forecastedvalues, test)
forecastedvalues
View(forecastedvalues)
library(Metrics)
rmse(forecastedvalues$mean, test)
# Directories
mydata<- read.csv("meteireann_dublin.csv")
attach(mydata)
summary(mydata)
weatherarima <- ts(mydata$meant[1:732], start = c(1941,11), frequency = 12)
plot(weatherarima,type="l",ylab="Temperature")
title("Mean Temperature - Dublin Airport")
stl_weather = stl(weatherarima, "periodic")
seasonal_stl_weather   <- stl_weather$time.series[,1]
trend_stl_weather     <- stl_weather$time.series[,2]
random_stl_weather  <- stl_weather$time.series[,3]
plot(as.ts(seasonal_stl_weather))
title("Seasonal")
plot(trend_stl_weather)
title("Trend")
plot(random_stl_weather)
title("Random")
# Load libraries
library(MASS)
library(tseries)
library(forecast)
# ACF, PACF and Dickey-Fuller Test
acf(weatherarima, lag.max=20)
pacf(weatherarima, lag.max=20)
adf.test(weatherarima)
components <- decompose(weatherarima)
components
plot(components)
# ARIMA
fitweatherarima<-auto.arima(weatherarima, trace=TRUE, test="kpss", ic="bic")
fitweatherarima
confint(fitweatherarima)
plot(weatherarima,type='l')
title('Mean temperature')
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitweatherarima,h=183)
forecastedvalues
plot(forecastedvalues)
# Test Values
test=mydata$meant[732:915]
test
library(Metrics)
rmse(forecastedvalues$mean, test)
# Test Values
test=mydata$meant[733:915]
test
library(Metrics)
rmse(forecastedvalues$mean, test)
mean(test)
# Directories
mydata<- read.csv("mly532_condensed.csv")
attach(mydata)
summary(mydata)
weatherarima <- ts(mydata$meant[1:732], start = c(1941,11), frequency = 12)
plot(weatherarima,type="l",ylab="Temperature")
title("Mean Temperature - Dublin Airport")
stl_weather = stl(weatherarima, "periodic")
seasonal_stl_weather   <- stl_weather$time.series[,1]
trend_stl_weather     <- stl_weather$time.series[,2]
random_stl_weather  <- stl_weather$time.series[,3]
plot(as.ts(seasonal_stl_weather))
title("Seasonal")
plot(trend_stl_weather)
title("Trend")
plot(random_stl_weather)
title("Random")
# Load libraries
library(MASS)
library(tseries)
library(forecast)
# ACF, PACF and Dickey-Fuller Test
acf(weatherarima, lag.max=20)
pacf(weatherarima, lag.max=20)
adf.test(weatherarima)
components <- decompose(weatherarima)
components
plot(components)
# ARIMA
fitweatherarima<-auto.arima(weatherarima, trace=TRUE, test="kpss", ic="bic")
fitweatherarima
confint(fitweatherarima)
plot(weatherarima,type='l')
title('Mean temperature')
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitweatherarima,h=183)
forecastedvalues
plot(forecastedvalues)
# Test Values
test=mydata$meant[733:915]
test
library(Metrics)
rmse(forecastedvalues$mean, test)
mean(test)
# Directories
mydata<- read.csv("electricity.csv")
attach(mydata)
summary(mydata)
View(mydata)
View(mydata)
# Directories
mydata<- read.csv("electricity.csv")
attach(mydata)
summary(mydata)
consumption <- ts(mydata$Value[1:544], start = c(2011,3,29), frequency = 365)
plot(consumption,type="l",ylab="Kilowatt Consumption")
title("Electricity Consumption")
stl_consumption = stl(consumption, "periodic")
seasonal_stl_consumption   <- stl_consumption$time.series[,1]
trend_stl_consumption     <- stl_consumption$time.series[,2]
random_stl_consumption  <- stl_consumption$time.series[,3]
plot(as.ts(seasonal_stl_consumption))
title("Seasonal")
plot(trend_stl_consumption)
title("Trend")
plot(random_stl_consumption)
title("Random")
# Directories
mydata<- read.csv("electricity.csv")
attach(mydata)
summary(mydata)
consumption <- ts(mydata$Value[1:544], start = c(2011,3,29), frequency = 365)
plot(consumption,type="l",ylab="Kilowatt Consumption")
title("Electricity Consumption")
# Load libraries
library(MASS)
library(tseries)
library(forecast)
# ACF, PACF and Dickey-Fuller Test
acf(consumption, lag.max=20)
pacf(consumption, lag.max=20)
adf.test(consumption)
components <- decompose(consumption)
components
plot(components)
# ARIMA
fitconsumptionarima<-auto.arima(consumption, trace=TRUE, test="kpss", ic="bic")
fitconsumptionarima
confint(fitconsumptionarima)
# Forecasted Values From ARIMA
forecastedvalues=forecast(fitconsumptionarima,h=136)
forecastedvalues
plot(forecastedvalues)
test=mydata$consumption[545:680]
test
View(mydata)
# Test Values
test=mydata$Value[545:680]
test
# Ljung-Box
Box.test(fitconsumptionarima$resid, lag=4, type="Ljung-Box")
Box.test(fitconsumptionarima$resid, lag=8, type="Ljung-Box")
Box.test(fitconsumptionarima$resid, lag=12, type="Ljung-Box")
library(Metrics)
rmse(forecastedvalues$mean, test)
mean(test)
